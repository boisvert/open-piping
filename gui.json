{
   "constant": {
      "label": "Data",
      "args": 0,
      "output": -1,
      "blockCode": "<form><input type='text' /><form>",
      "group": {
         "Num": {
            "getExp":"const inpt = block.find('form > input')[0]; return Number(inpt.value);"
         },
         "String": {
            "getExp":"const inpt = block.find('form > input')[0]; return inpt.value.unescape();"
         },
         "Array": {
            "getExp": "const inpt = block.find('form > input')[0]; return JSON.parse(inpt.value);"
         },
         "JSON": {
            "getExp": "const inpt = block.find('form > input')[0]; return JSON.parse(inpt.value);"
         }
      }
   },
   "load file": {
      "label": "Data",
      "args":2,
      "output":1,
      "getExp": "return 'getfile';"
   },
   "keep variable": {
      "label": "Data",
      "args":1,
      "output":-1,
      "getExp":"return 'assign';"      
   },
   "alert": {
      "label": "Display",
      "args":1,
      "getExp":"return 'popup';"

   },
   "inject HTML": {
      "label": "Display",
      "args":1,
      "getExp":"return 'inject';"
   },
   "arithmetic": {
      "label": "Math",
      "args": 2,
      "group": {
         "+": {"getExp":"return 'plus';"},
         "-": {"getExp":"return 'minus';"},
         "*": {"getExp":"return 'times';"},
         "\/": {"getExp":"return 'divide';"},
         "\\": {"getExp":"return 'intdiv';"},
         "mod": {"getExp":"return 'mod';"},
         "power": {"getExp":"return 'power';"}
      }
   },
   "function": {
      "label": "Math",
        "args": 1,
        "group": {
         "sqrt": {},
            "sin": {},
            "cos": {},
            "tan": {},
            "exp": {},
            "log": {}
        }
    },
   "Statistics": {
      "label": "Math",
        "args": 1,
        "group": {
         "min": {},
            "max": {},
            "average": {},
            "median": {},
            "stdevp": {}
        }
    },
   "if": {
      "label": "Conditional",
      "args":3
   },
   "comparison": {
      "label": "Conditional",
        "args": 2,
        "group": {
            "<": {"getExp":"return 'lt';"},
            "<=": {"getExp":"return 'lte';"},
            ">": {"getExp":"return 'mt';"},
            ">=": {"getExp":"return 'mte';"},
            "=": {"getExp":"return 'equals';"}
        }
    },
   "type check": {
      "label": "Conditional",
        "args":1,
        "group": {
            "isNumber":{},
            "isString": {},
            "isArray": {},
            "isNull": {}
        }
    },
   "boolean and/or": {
      "label": "Conditional",
        "args": 2,
        "group": {
            "or": {},
            "and": {}
        }
    },
   "not": {
      "label": "Conditional",
      "args": 1
   },
   "parts of array": {
      "label": "Arrays",
      "args": 1,
      "group": {
         "first": {},
         "rest": {}
      }
   },
   "array size": {
      "label": "Arrays",
      "args": 1,
      "group": {
         "size": {},
         "isEmpty": {}
      }
   },
   "build": {
      "label": "Arrays",
      "args": 2,
      "group": {
         "add_to_Start": {},
         "add_to_End": {},
         "list_Concat": {}
      }
   },
   "map": {
      "label": "Arrays",
      "args": 2
   },
   "reduce": {
      "label": "Arrays",
      "args": 3
   },
   "filter": {
      "label": "Arrays",
      "args": 2
   },
   "join": {
      "label":"Strings",
      "args": 2
   },
   "split": {
      "label":"Strings",
      "args": 2
   },
   "string_concat": {
      "label":"Strings",
      "args": 2
   },
   "use block": {
      "label": "Blocks",
      "args": 1
   },
   "lambda": {
      "label": "Blocks",
      "args": 2
   },
   "apply": {
      "label": "Blocks",
      "args": 2
   },
   "parameters": {
      "label": "Blocks",
      "args": 1
   }
}

